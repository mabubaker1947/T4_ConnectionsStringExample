<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name= "System.Xml" #>
<#@ assembly name= "System.Xml.Linq" #>
<#@ assembly name= "System.Collections" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Configuration;


/*
This is an auto generated class
*/
public static class ConnectionStrings{

<#
    foreach(XElement element in ReadConfig()){
        string connectionName= element.Attribute(XName.Get("name")).Value;
        string propertyName= CleanName(connectionName);
    #>
 public static string <#= propertyName #>{
        get { return ConfigurationManager.ConnectionStrings["<#= connectionName #>"].ConnectionString;}
}
<#    
}
#>
}



<#+ 
// These are private helper methods
// they are not gonna be part of the output however just helping us creating the output


    // cleaning the input from XML config file and remove the spaces as it interfere with output
    private string CleanName(string name){
        return name.Replace(" ", string.Empty);
    }

    // Reads the config data from the XML file
    private IEnumerable<XElement> ReadConfig(){
        string configurationPath= GetConfigFilePath();

        // if configuration path is null or empty return an empty list
        if(string.IsNullOrEmpty(configurationPath)){
            return new List<XElement>();
        }

        XDocument configuration = XDocument.Load(configurationPath);
        XElement connectionElement = configuration.Root.Element(XName.Get("connectionStrings"));
        
        if(connectionElement == null){
            Error("ConnectionStrings node was not found in the configuraton file");
            return new List<XElement>();
        }
        return connectionElement.Elements();
    }

    // Get teh configuration File Path
    public string GetConfigFilePath(){
        FileInfo fileInfo = new FileInfo(Host.TemplateFile);
        string currentFolder = fileInfo.Directory.FullName;

        string appConfig= Path.Combine(currentFolder, "App.config");
        string webConfig= Path.Combine(currentFolder, "Web.config");

        if(File.Exists(appConfig)){
            return appConfig;
        }
        if(File.Exists(webConfig)){
            return webConfig;
        }

        Error("Could not find a configuration file!");
        return string.Empty;
    }
#>
